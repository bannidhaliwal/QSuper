<html>
  <head>
    <!-- This ejs statement includes header partial.
    Varibale declaration decides which page is active !-->
    <% include head.ejs %>
    <% var page = 'gamepage'%>
    <% var active = " active"%>
  </head>
  <body>
    <% include header.ejs %>
    <div id = "GameContent" class = "container containerExtensionForContentArea" style = "background-color:white;">
      <div class = "gameControllers">
        <div class = "gameControllersInsideBoxes">
            Level : 1
        </div>
        <div class = "gameControllersInsideBoxes">
            Cash : <span id = "score"></span>
        </div>
        <div class = "gameControllersInsideBoxes">
            Moves : <span id = "moves"></span>
        </div>
        <div class = "gameControllersInsideBoxes">
            Super : <span id = "super"></span>
        </div>
      </div>
      <div class = "gameCanvasWrapper">
        <!-- It is important that the dimesnions of the canvas remains same.
          if you want to change the dimensions, you have to change the functions at
          the backend as well..
          Dimensions are 400 x 400 in case if someone changes it..
        !-->
        <canvas id = "canvas" width="400" height = "400"></canvas>
      </div>
    </div>
    <div id = "SuperInformation" class = "container containerExtensionForContentArea">
      <h1> LEVEL CLEAR</h1>
      <div class = "SuperInformationBox">
        <div class = "SuperInformationBoxInsideBox"><h4>Without Super</h4></div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Total Salary : <span id = "totalSalaryWithoutSuper"></h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Tax : <span id = "taxWithoutSuper"></span></h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Take home: <span id = "takeHomeWithoutSuper"></span> </h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Super Funds: <span id = "superFundsWithoutSuper"></span></h5>
        </div>
        <h1>$ <span id = "totalScoreWithoutSuper"></span></h1>
      </div>
      <!-- start of with super contribution!-->
      <div class = "SuperInformationBox">
        <div class = "SuperInformationBoxInsideBox"><h4>With Super</h4></div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Total Salary : <span id = "totalSalaryWithSuper"></h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Extra Super Contribution(Maximum <span id = "superMaximum"></span>) :
            <input id = "extraSuperInput">
           </h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Tax : <span id = "taxWithSuper"></span></h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Take home: <span id = "takeHomeWithSuper"></span> </h5>
        </div>
        <div class = "SuperInformationBoxInsideBox">
          <h5>Super Funds: <span id = "superFundsWithSuper"></span></h5>
        </div>
        <h1>$ <span id = "totalScoreWithSuper"></span></h1>
      </div>
    </div>
    <% include footer.ejs %>
    <!--This images will be used to draw on canvas.
        We are not showing this images that is why the display property is none.
    !-->
    <img style="display:none" id = "balance" src="/balance.png"></img>
    <img style="display:none" id = "cash" src="/cash.png"></img>
    <img style="display:none" id = "cocontribution" src="/cocontribution.png"></img>
    <img style="display:none" id = "conservative" src="/conservative.png"></img>
    <img style="display:none" id = "growth" src="/growth.png"></img>
    <img style="display:none" id = "salarysacrifice" src="/salarysacrifice.png"></img>
    <img style="display:none" id = "empty" src="/empty.png"></img>
  </body>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/Scripts/AnimationFunctions.js"></script>
  <script src ="/Scripts/CalculationsForClientSide.js"></script>
  <script src = "/Scripts/Sounds.js"></script>
  <script src = "/Scripts/UpdateGameElements.js"></script>
  <script>

      //Socket functions..
      var socket = io.connect();
      var img = [document.getElementById("cash"),document.getElementById("balance"),document.getElementById("cocontribution"),
      document.getElementById("conservative"),document.getElementById("growth"),document.getElementById("salarysacrifice"),
      document.getElementById("empty")];
      //Canvas for the functions..
      var canvas = document.getElementById("canvas").getContext("2d");

      //This function will be invoked when the game ends
      socket.on("GameEnds",function(data){
        console.log("Game Ended");
        UpdateFinalStatsOfGame(data.levelData.score);
        SwapDivs();
      });

      //Swap animation for the swapping elements..
      socket.on("SwapAnimation",function(data){
        SwapObjects(data,canvas,img);
      });

      //Highlight the selected item
      socket.on("Highlight",function(data){
        Highlight(data,canvas,img,"#33FFA5");
      });

      //Dehighlight the box
      socket.on("Dehighlight",function(data){
        Highlight(data,canvas,img,"white");
      });

      //Move the elements..
      socket.on("MoveElements",function(data){
        //Here we play the music after the tiles has been popped and before moving the tiles..
        PlayMusic();
        MoveElements(data,canvas,img);
      });

      //When Socket connects with server for first time,
      //Server serves with gameBox array. With that array
      //We draw on canvas.
      socket.on("Game Initialized",function(data){
        var array = data.array;
        var HEIGHT_OF_CANVAS = 400;
        var WIDTH_OF_CANVAS = 400;
        var LEVEL_INFORMATION_ELEMENT = 11;
        canvas.clearRect(0, 0, WIDTH_OF_CANVAS,HEIGHT_OF_CANVAS);//clear the canvas before redrawing..
        UpdateHTML(array[LEVEL_INFORMATION_ELEMENT].score,array[LEVEL_INFORMATION_ELEMENT].moves);
        for(var i = 0; i < array.length;i++){
          if(array[i] !== null){
            //Here we are choosing element from array img on the base of element of current box.
            canvas.drawImage(img[array[i].element],array[i].xPosition,array[i].yPosition,array[i].height,array[i].width);
          }
        }//end For
      }
      );//end Socket.on
      socket.on("Redraw",function(data){
        var array = data.array;
        var HEIGHT_OF_CANVAS = 400;
        var WIDTH_OF_CANVAS = 400;
        var LEVEL_INFORMATION_ELEMENT = 11;
        UpdateHTML(array[LEVEL_INFORMATION_ELEMENT].score,array[LEVEL_INFORMATION_ELEMENT].moves);
        canvas.clearRect(0, 0, WIDTH_OF_CANVAS,HEIGHT_OF_CANVAS);//clear the canvas before redrawing..
        document.getElementById("score").innerHTML = array[11].score;
        for(var i = 0; i < array.length;i++){
          if(array[i] !== null){
            //Here we are choosing element from array img on the base of element of current box.
            canvas.drawImage(img[array[i].element],array[i].xPosition,array[i].yPosition,array[i].height,array[i].width);
          }
        }//end For
      }
      );

      //we are adding the event listener to the canvas on click
      var canvasPlane = document.getElementById("canvas");
      canvasPlane.addEventListener('click',function() {
        var canvas = document.getElementById("canvas");
        var rectangleOnCanvas = canvas.getBoundingClientRect();
        var xCoord = Math.round(event.clientX - rectangleOnCanvas.left);
        var yCoord = Math.round(event.clientY - rectangleOnCanvas.top);
        socket.emit("ClickedOnCanvas",{X : xCoord, Y : yCoord});
      });
  </script>
</html>
